{"version":3,"sources":["ng://spinner/lib/spinner.service.ts","ng://spinner/lib/spinner.component.ts","ng://spinner/lib/spinner.module.ts"],"names":["SpinnerService","this","spinnerCache","Set","prototype","_register","spinner","add","_unregister","spinnerToRemove","_this","forEach","delete","_unregisterGroup","spinnerGroup","group","_unregisterAll","clear","show","spinnerName","name","hide","showGroup","hideGroup","showAll","hideAll","isShowing","showing","Injectable","args","providedIn","SpinnerComponent","spinnerService","showChange","EventEmitter","Object","defineProperty","val","emit","ngOnInit","Error","ngOnDestroy","Component","selector","template","Input","Output","SpinnerModule","NgModule","declarations","imports","CommonModule","exports","providers"],"mappings":"+TAAA,IAAAA,EAAA,WAQE,SAAAA,IADQC,KAAAC,aAAe,IAAIC,WAG3BH,EAAAI,UAAAC,UAAA,SAAUC,GACRL,KAAKC,aAAaK,IAAID,IAGxBN,EAAAI,UAAAI,YAAA,SAAYC,GAAZ,IAAAC,EAAAT,KACEA,KAAKC,aAAaS,SAAO,SAACL,GACpBA,IAAYG,GACdC,EAAKR,aAAaU,OAAON,OAK/BN,EAAAI,UAAAS,iBAAA,SAAiBC,GAAjB,IAAAJ,EAAAT,KACEA,KAAKC,aAAaS,SAAO,SAACL,GACpBA,EAAQS,QAAUD,GACpBJ,EAAKR,aAAaU,OAAON,OAK/BN,EAAAI,UAAAY,eAAA,WACEf,KAAKC,aAAae,SAGpBjB,EAAAI,UAAAc,KAAA,SAAKC,GACHlB,KAAKC,aAAaS,SAAO,SAACL,GACpBA,EAAQc,OAASD,IACnBb,EAAQY,MAAO,OAKrBlB,EAAAI,UAAAiB,KAAA,SAAKF,GACHlB,KAAKC,aAAaS,SAAO,SAACL,GACpBA,EAAQc,OAASD,IACnBb,EAAQY,MAAO,OAKrBlB,EAAAI,UAAAkB,UAAA,SAAUR,GACRb,KAAKC,aAAaS,SAAO,SAACL,GACpBA,EAAQS,QAAUD,IACpBR,EAAQY,MAAO,OAKrBlB,EAAAI,UAAAmB,UAAA,SAAUT,GACRb,KAAKC,aAAaS,SAAO,SAACL,GACpBA,EAAQS,QAAUD,IACpBR,EAAQY,MAAO,OAKrBlB,EAAAI,UAAAoB,QAAA,WACEvB,KAAKC,aAAaS,SAAO,SAACL,GAAW,OAAAA,EAAQY,MAAO,MAGtDlB,EAAAI,UAAAqB,QAAA,WACExB,KAAKC,aAAaS,SAAO,SAACL,GAAW,OAAAA,EAAQY,MAAO,MAGtDlB,EAAAI,UAAAsB,UAAA,SAAUP,OACJQ,EAMJ,OALA1B,KAAKC,aAAaS,SAAO,SAACL,GACpBA,EAAQc,OAASD,IACnBQ,EAAUrB,EAAQY,SAGfS,uBA9EVC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAJd,GCAA,IAAAC,EAAA,WAeE,SAAAA,EAAoBC,GAAA/B,KAAA+B,eAAAA,EAMZ/B,KAAAyB,WAAY,EAEVzB,KAAAgC,WAAa,IAAIC,EAAAA,aAqB7B,OAnBEC,OAAAC,eACIL,EAAA3B,UAAA,OAAI,KADR,WAEE,OAAOH,KAAKyB,eAGd,SAASW,GACPpC,KAAKyB,UAAYW,EACjBpC,KAAKgC,WAAWK,KAAKrC,KAAKyB,4CAG5BK,EAAA3B,UAAAmC,SAAA,WACE,IAAKtC,KAAKmB,KAAQ,MAAM,IAAIoB,MAAM,yCAElCvC,KAAK+B,eAAe3B,UAAUJ,OAGhC8B,EAAA3B,UAAAqC,YAAA,WACExC,KAAK+B,eAAexB,YAAYP,2BAvCnCyC,EAAAA,UAASb,KAAA,CAAC,CAETc,SAAU,UACVC,SAAU,kLALH5C,mCAgBN6C,EAAAA,qBACAA,EAAAA,4BACAA,EAAAA,0BAIAC,EAAAA,qBAEAD,EAAAA,SAmBHd,EA5CA,GCAA,IAAAgB,EAAA,WAKA,SAAAA,KAM6B,2BAN5BC,EAAAA,SAAQnB,KAAA,CAAC,CACRoB,aAAc,CAAClB,GACfmB,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACrB,GACVsB,UAAW,CAACrD,OAEe+C,EAX7B","sourcesContent":["import { Injectable } from '@angular/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpinnerService {\n  private spinnerCache = new Set<SpinnerComponent>();\n  constructor() { }\n\n  _register(spinner: SpinnerComponent): void {\n    this.spinnerCache.add(spinner);\n  }\n\n  _unregister(spinnerToRemove: SpinnerComponent): void {\n    this.spinnerCache.forEach(spinner => {\n      if (spinner === spinnerToRemove) {\n        this.spinnerCache.delete(spinner);\n      }\n    });\n  }\n\n  _unregisterGroup(spinnerGroup: string): void {\n    this.spinnerCache.forEach(spinner => {\n      if (spinner.group === spinnerGroup) {\n        this.spinnerCache.delete(spinner);\n      }\n    });\n  }\n\n  _unregisterAll(): void {\n    this.spinnerCache.clear();\n  }\n\n  show(spinnerName: string): void {\n    this.spinnerCache.forEach(spinner => {\n      if (spinner.name === spinnerName) {\n        spinner.show = true;\n      }\n    });\n  }\n\n  hide(spinnerName: string): void {\n    this.spinnerCache.forEach(spinner => {\n      if (spinner.name === spinnerName) {\n        spinner.show = false;\n      }\n    });\n  }\n\n  showGroup(spinnerGroup: string): void {\n    this.spinnerCache.forEach(spinner => {\n      if (spinner.group === spinnerGroup) {\n        spinner.show = true;\n      }\n    });\n  }\n\n  hideGroup(spinnerGroup: string): void {\n    this.spinnerCache.forEach(spinner => {\n      if (spinner.group === spinnerGroup) {\n        spinner.show = false;\n      }\n    });\n  }\n\n  showAll(): void {\n    this.spinnerCache.forEach(spinner => spinner.show = true);\n  }\n\n  hideAll(): void {\n    this.spinnerCache.forEach(spinner => spinner.show = false);\n  }\n\n  isShowing(spinnerName: string): boolean | undefined {\n    let showing;\n    this.spinnerCache.forEach(spinner => {\n      if (spinner.name === spinnerName) {\n        showing = spinner.show;\n      }\n    });\n    return showing;\n  }\n}\n","import { Component, Input, Output, OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { SpinnerService } from './spinner.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'spinner',\n  template: `\n    <div *ngIf=\"show\">\n      <img *ngIf=\"loadingImage\" [src]=\"loadingImage\" />\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: []\n})\nexport class SpinnerComponent implements OnInit, OnDestroy {\n  constructor(private spinnerService: SpinnerService) {}\n\n  @Input() name: string;\n  @Input() group: string;\n  @Input() loadingImage: string;\n\n  private isShowing = false;\n\n  @Output() showChange = new EventEmitter();\n\n  @Input()\n  get show(): boolean {\n    return this.isShowing;\n  }\n\n  set show(val: boolean) {\n    this.isShowing = val;\n    this.showChange.emit(this.isShowing);\n  }\n\n  ngOnInit(): void {\n    if (!this.name) { throw new Error('Spinner must have a \\'name\\' attribute.'); }\n\n    this.spinnerService._register(this);\n  }\n\n  ngOnDestroy(): void {\n    this.spinnerService._unregister(this);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from './spinner.component';\nimport { SpinnerService } from './spinner.service';\n\n@NgModule({\n  declarations: [SpinnerComponent],\n  imports: [CommonModule],\n  exports: [SpinnerComponent],\n  providers: [SpinnerService]\n})\nexport class SpinnerModule { }\n"]}